# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

# ---------- PYTHON SNIPPETS (MOSTLY DJANGO ) ------------------------
'.source.python':
  'IfElIfElse':
     'prefix': 'ifele'
     'body': """
        if ${1:condition}:
            ${2:action}
        elif ${3:conditon}:
            ${4:action}
        else:
            ${4:action}
     """
  'CharField':
    'prefix': 'dj_cf'
    'body': '${1:fieldname} = models.CharField(max_length=${2:0}, null=${3:True}, blank=${4:True}, verbose_name="${5:vname}", help_text="${6:text}")$7'
  'DecField':
    'prefix': 'dj_decf'
    'body': '${1:fieldname} = models.DecimalField(max_digits=${2:0},decimal_places=${3:0},help_text="${4:text}", verbose_name="${5:vname}",)$6'
  'Created Date':
    'prefix': 'dj_cd'
    'body': 'created_date = models.DateField(auto_now_add=True)'
  'Modified Date':
    'prefix': 'dj_md'
    'body': 'modified_date = models.DateField(auto_now=True)'
  'Django Model':
    'prefix': 'dj_model'
    'body': """
    class ${1:model}(models.Model):
        \"\"\"
        ${2:Docstring}
        \"\"\"
        date_created = models.DateTimeField(auto_now_add=True, help_text='date record created.')
        date_modified = models.DateTimeField(auto_now=True, help_text='date of most recent record modification.')
        created_by = models.ForeignKey('auth.User', \
        help_text='user who created record.', \
        null=True, blank=True, on_delete=models.${3:SET_NULL}, related_name='${1:model}_created')
        modified_by=models.ForeignKey('auth.User', \
        help_text='user who most recently modified record.', \
        null=True, blank=True, on_delete=models.${4:SET_NULL}, related_name='${1:model}_modified')
        $6

        def get_absolute_url(self):
            pass

        def get_del_url(self):
            pass

        class Meta:
            app_label = ${5:app_name}

            """
  'ForeignKey':
    'prefix': 'dj_fk'
    'body': '${1:fieldname} = models.ForeignKey(${2:model}, ${3:null=True,} on_delete=models.${4:SET_NULL})$5'
  'ManytoMany':
    'prefix': 'dj_m2m'
    'body': '${1:fieldname} = models.ManyToManyField(${2:model})$3'
  'DateTime':
    'prefix': 'dj_dt'
    'body': '${1:fieldname} = models.DateTimeField(help_text=${2:text}, verbose_name="${3:vname}")$4'
  'Boolean':
    'prefix': 'dj_nb'
    'body': '${1:fieldname} = models.BooleanField(verbose_name="${2:vname}")$3'
  'Function Definition':
    'prefix': 'def'
    'body': """
    def ${1:name}(${2:args}):
        \"\"\"
        ${3:docstring}
        \"\"\"
        ${4:pass}
    """
  'Integer':
    'prefix': 'dj_int'
    'body': '${1:fieldname} = models.IntegerField(default=${2:0}, verbose_name="${3:vname}")$4'
  'URL':
    'prefix': 'dj_url'
    'body': """path('${1:url}/', views.${2:view}, name='${3:name}'),"""
  'Django CBV Url':
    'prefix': 'dj_curl'
    'body': """
        path('${1:url}/', views.${2:CBV}.as_view(), name='${3:name}'),$4
    """
  'URL_I':
    'prefix': 'dj_iurl'
    'body': """path('${1:url}/', include("${2:app}.urls")),"""
  'Text':
    'prefix': 'dj_txt'
    'body': """${1:fieldname} = models.TextField(help_text=${2:text})$3"""
  '_Function':
     'prefix': '_def'
     'body': '''
        def ${1:function_name}(${2:args}):
            """
            ${3:docstring}
            """
            ${4:pass}
     '''

    'Class Based View':
      'prefix': 'cbv'
      'body': '''
      class ${1:ViewName}(${2:BaseClass}):
          """
          ${3:Docstring}
          """
          model = ${4:my_model}

          def render_to_response(self, context, **response_kwargs):
              return self.render_to_json_response(context, **response_kwargs)
      '''
  'Docstring':
    'prefix': 'docstr',
    'body': '''
            """
            ${1:Docstring}
            """
            '''

  'File Docstring':
    'prefix': 'fdocstr'
    'body': '''
        """
        ${1:filename}
        ------------------------------------------
        ${2:description}
        """
    '''

  'Google TODO':
    'prefix': 'todo',
    'body': '# TODO(${1:rmanzer@nordicnaturals.com}) $2'

  'CBV Get Context Data':
    'prefix': 'dj_gcd',
    'body': '''
        def get_context_data(self, *args, **kwargs):
            context = super().get_context_data(*args, **kwargs)
            ${2:other_stuff}

            return context
    '''
  'CBV JSON Response':
    'prefix':  'dj_jsr',
    'body': '''
        def render_to_response(self, context, **response_kwargs):
            return self.render_to_json_response(context, **response_kwargs)
    '''
  'CBV MSG Response':
      'prefix': 'dj_mp',
      'body': '''
        def post(self, request, *args, **kwargs):
            return self.msg_post(request, *args, **kwargs)
      '''
  'Default Name == Main':
    'prefix': 'inamem',
    'body': '''
    if __name__ == "__main__":
        $1
    '''

  'Test Class':
    'prefix': 'testc'
    'body': '''
    class ${1:MyTestClass}(TestCase):
        """
        ${2:docstring}
        """

        @classmethod
        def setUpTestData(cls):
            # setUpTestData is run once to create non-modified data that will be shared amongst all test methods.
            pass

        def setUp(self):
            # setup method run before every test
            ${3:pass}

        def ${4:test_something}(self):
            pass
    '''
  'REST Test Class':
    'prefix': 'testr'
    'body': '''
    class ${1:MyTestClass}(APITestCase):
        """
        ${2:docstring}
        """

        def detail_url(self, obj):
            return reverse("${3:url_name}", kwargs={'pk': obj.id})

        @classmethod
        def setUpTestData(cls):
            # setUpTestData is run once to create non-modified data that will be shared amongst all test methods.
            pass

        def setUp(self):
            # setup method run before every test
            ${4:pass}

        def ${5:test_get_list}(self):
            """
            Testing list API endpoint
            """
            pass

        def ${6:test_get_detail}(self):
            """
            Testing detail API endpoint
            """
            pass

    '''
  'REST test method':
    'prefix': 'rtestdef'
    'body': 'response = self.client.${1:method}(${2:url}, $3, format="json")'

  'Model Admin Class':
    'prefix': 'mac'
    'body' : '''
        @admin.register(${1:model})
        class ${2:ModelAdmin}(admin.ModelAdmin):
            pass
    '''
  'Custom PDB':
      'prefix': 'pdb_'
      'body': '''
        if DEBUG:
            import pdb; pdb.set_trace()
      '''
  'Django CRUD CBVs':
      'prefix': 'dj_crudv'
      'body':'''
      # --------------- READ ONLY VIEWS -----------------
      class ${1:Model}List(mixins.JSONResponseMixinn, generic.ListView):
         """
         List view for ${1:Model}
         """
         model = ${2:model}

         def render_to_response(self, context, **response_kwargs):
             return self.render_to_json_response(context, **response_kwargs)

      class ${1:Model}Detail(mixins.JSONResponseMixinn, generic.DetailView):
          """
          Detail view for ${1:Model}
          """
          model = ${2:model}

          def render_to_response(self, context, **response_kwargs):
              return self.render_to_json_response(context, **response_kwargs)

      # ---------------- WRITABLE VIEWS -----------------
      class ${1:Model}Create(mixins.JSONResponseMixinn, generic.CreateView):
          """
          Create view for ${1:Model}
          """
          model = ${2:model}

          def render_to_response(self, context, **response_kwargs):
              return self.render_to_json_response(context, **response_kwargs)

      class ${1:Model}Update(mixins.JSONResponseMixinn, generic.UpdateView):
          """
          Create view for ${1:Model}
          """
          model = ${2:model}

          def render_to_response(self, context, **response_kwargs):
              return self.render_to_json_response(context, **response_kwargs)

      class ${1:Model}Delete(mixins.JSONResponseMixin, generic.DeleteView):
          """
          Create view for ${1:Model}
          """
          model = ${2:model}
          template_name = 'home/ajax/confirm_delete.html'

          def render_to_response(self, context, **response_kwargs):
              return self.render_to_json_response(context, **response_kwargs)
      '''
    'Django CRUD Urls':
        'prefix': 'dj_crud_url'
        'body': '''
            # ------------ READ ONLY URLS ---------------------
            path('${1:model}/', views.${2:Model}List.as_view(), name='${1:model}-list'),
            path('${1:model}/<int:pk>/', views.${2:Model}Detail.as_view(), name='${1:model}-detail'),
            # -------------- WRITABLE URLS ---------------------
            path('${1:model}/create/', views.${2:Model}Create.as_view(), name="create-${1:model}"),
            path('${1:model}/<int:pk>/update/', views.${2:Model}Update.as_view(), name="update-${1:model}"),
            path('${1:model}/<int:pk>/', views.${2:Model}Delete.as_view(), name="delete-${1:model}"),
        '''
# -----------------  SQL SNIPPETS ------------------------
'.source.sql':
    'DropTableIfExists':
        'prefix': 'dife'
        'body': 'DROP TABLE IF EXISTS ${1:table};${2:}'
    'TempTable':
        'prefix': 'ctemp'
        'body': 'CREATE TEMPORARY TABLE ${1:table} AS (${2:});'
    'Update1':
        'prefix': 'up1'
        'body': 'UPDATE ${1:table} SET ${2:field} = ${3:val} WHERE ${4:field} LIKE ${5:val};'

# --------------- YAML SNIPPETS (USED FOR LOOKER) --------------------
'.source.yaml':
    'dimension':
        'prefix': 'l_dim'
        'body': """
        dimension: ${1:name} {
          type: ${2:type}
          sql: \${TABLE}.${3:field} ;;
        }
        """
    'dimension_group':
        'prefix': 'l_dimg'
        'body': """
        dimension_group: ${1:name} {
            type: time
            timeframes: [
                raw,
                date,
                week,
                month,
                quarter,
                year
            ]
            convert_tz: no
            sql: ${2:field}
        }
        """
#-------------------- JAVASCRIPT SNIPPETS ---------------------------
'.source.js':
  'JS Module':
    'prefix': 'js_mod'
    'body': """
            var ${1:name} = (function(){
                    ${2:code}
                    return {

                    };
                })();
          """

  'Form_AJAX':
    'prefix': 'js_ajx'
    'body': """
        $.ajax({
            url: ${1:form.attr('action')},
            type: ${2:form.attr('method')},
            data: ${3:form.serialize()},
            dataType:'json',
            success: function(data){
                $4
            }
        });

    """
  'D3 Width Height':
    'prefix': 'wh_d3'
    'body': """
        var myHead=($("div.jumbotron").height() + $("nav").height()),
        _width = $(window).innerWidth(),
        _height = ($(window).innerHeight()-myHead);
    """
  'Docstring':
    'prefix': 'js_docstr'
    'body': """
    /**
    ${1:filename}.js
----------------------------------------------------------------------
    ${2:docstr}
    */
    """
  'AEL':
    'prefix': 'jael'
    'body': """
        ${1:document}.addEventListener('${2:DOMContentLoaded}', ${3:function});
    """
#--------------------- HTML SNIPPETS ---------------------------------
'.text.html.django':
  'Card with Header':
    'prefix': 'card_div'
    'body': '''
        <div class="card">
            <div class="card-header text-center">
                ${1}
            </div>
            <div class="card-body text-center">
                ${2}
            </div>
            <div class="card-footer">
                ${3}
            </div>
        </div>
    '''
  'My HTML Starter':
    'prefix': 'my_html'
    'body': '''
    <!--
    #################################################################
    ${1:app_name}/${2:filename}
    #################################################################
    ${3:file_desc}
    -->
    '''
  'Form Field w/ Label':
    'prefix': 'ffield'
    'body': '''
    {{form.$1}}
    <label for="{{form.$1.id_for_label}}">{{form.$1.label}}</label>
    <small>{{form.$1.help_text}}</small>
    '''
  'Django For..Empty':
    'prefix': 'forfirst'
    'body': '''
     {% for $1 in $2 %}
        {% if forloop.first %}
            $3
        {% endif %}
            $4
        {% if forloop.last %}
            $5
        {% endif %}
     {% empty %}
        $5
     {% endfor %}
    '''
  'Bootstrap Form Div':
    'prefix': 'bsfdiv'
    'body': '''
        <div class="form-group">
            <label for="{{form.$1.id_for_label}}">{{form.%1.label}}</label>
            {{form.$1}}
            <small class="form-text text-muted">{{form.$1.help_text}}</small>
        </div>
    '''
